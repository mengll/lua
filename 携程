协程（Coroutine）
协程类似一种多线程，与多线程的差别有： 

1. 协程并不是os线程，所以创建、切换开销比线程相对要小。 

2. 协程与线程一样有自己的栈、局部变量等，可是协程的栈是在用户进程空间模拟的，所以创建、切换开销非常小。

3. 多线程程序是多个线程并发运行。也就是说在一瞬间有多个控制流在运行。而协程强调的是一种多个协程间协作的关系，仅仅有当一个协程主动放弃运行权，还有一个协程才干获得运行权，所以在某一瞬间，多个协程间仅仅有一个在运行。 

4. 因为多个协程时仅仅有一个在执行，所以对于临界区的訪问不须要加锁。而多线程的情况则必须加锁。

5. 多线程程序因为有多个控制流。所以程序的行为不可控，而多个协程的运行是由开发人员定义的所以是可控的。 

Nginx的每一个Worker进程都是在epoll或kqueue这种事件模型之上，封装成协程，每一个请求都有一个协程进行处理。这正好与Lua内建协程的模型是一致的，所以即使ngx_lua须要运行Lua，相对C有一定的开销，但依旧能保证高并发能力。

1）创建一个协程
co = coroutine.create(
     function()
        print("新的协同程序")
        return coroutine.yeild(2)
     end
 )
 
2)启用当前的协程
有两种方式启用当前的协程程序  
coroutine.resume(co) 启动协程 

3）yeild的作用使用，当前的程序，挂起再次使，可恢复执行的实现

